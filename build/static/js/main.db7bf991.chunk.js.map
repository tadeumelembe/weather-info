{"version":3,"sources":["Components/WeatherCharts.js","Components/DailyWeather.js","Components/Search.js","Views/Weather.js","Views/Home.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCharts","props","console","log","weather","initMapScript","window","google","Promise","resolve","script","document","createElement","body","getElementsByTagName","src","async","appendChild","addEventListener","convertTimestamp","timestamp","d","Date","mm","getFullYear","getMonth","slice","dd","getDate","hh","getHours","getMinutes","useEffect","undefined","then","drawBasic","data","visualization","DataTable","addColumn","addRows","dt","temp","max","options","hAxis","title","vAxis","LineChart","getElementById","draw","charts","load","packages","setOnLoadCallback","googleCharts","style","maxWidth","width","className","id","height","TabPanel","children","value","index","other","role","hidden","Box","p","a11yProps","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","DailyWeather","classes","React","useState","setValue","weekDaysArray","getWeekDay","ww","getDay","AppBar","position","color","Tabs","onChange","event","newValue","variant","scrollButtons","TabIndicatorProps","Tab","label","dailyWeather","map","item","Card","Body","marginRight","marginLeft","display","min","description","process","GOOGLE_API_KEY","Search","address","setAddress","routeNavigation","useHistory","initAutocomplete","input","searchBox","maps","places","SearchBox","types","addListener","getPlaces","addressName","formatted_address","forEach","place","geometry","location","lat","lng","coordinates","push","type","placeholder","target","api","create","baseURL","headers","Accept","Weather","useParams","loadingWeather","setLoadingWeather","weatherInfo","setWeatherInfo","get","response","daily","status","catch","err","finally","minHeight","Container","Row","Col","xs","sm","md","textDecoration","to","fontSize","Spinner","animation","yyyy","h","ampm","current","textTransform","fontWeight","humidity","Number","visibility","wind_speed","toFixed","Home","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.db7bf991.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { Chart } from \"react-google-charts\";\nimport { Spinner } from 'react-bootstrap';\n\n\nexport default function WeatherCharts(props) {\n    console.log('-----------------------')\n    console.log(props.weather)\n\n    function initGoogleScripts() {\n        return new Promise(resolve => {\n            const script = document.createElement('script')\n            const body = document.getElementsByTagName('head')[0]\n            script.src = `https://www.gstatic.com/charts/loader.js`\n            script.async = true\n            body.appendChild(script)\n            script.addEventListener('load', () => {\n                return resolve(script)\n            })\n        })\n    }\n\n    const initMapScript = () => {\n        // if script already loaded\n        if (window.google) {\n            return Promise.resolve();\n        }\n\n        return initGoogleScripts();\n    }\n\n    useEffect(() => {\n        window.google = undefined\n\n        initMapScript().then(() => googleCharts())\n\n\n    }, [])\n\n\n\n    function convertTimestamp(timestamp) {\n        var d = new Date(timestamp * 1000),\n            yyyy = d.getFullYear(),\n            mm = ('0' + (d.getMonth() + 1)).slice(-2),\n            dd = ('0' + d.getDate()).slice(-2),\n            hh = d.getHours(),\n            h = hh,\n            min = ('0' + d.getMinutes()).slice(-2),\n            ampm = 'AM',\n            time;\n\n        if (hh > 12) {\n            h = hh - 12;\n            ampm = 'PM';\n        } else if (hh === 12) {\n            h = 12;\n            ampm = 'PM';\n        } else if (hh == 0) {\n            h = 12;\n        }\n\n        time = dd + '/' + mm;\n        return time;\n    }\n\n    function googleCharts() {\n\n        window.google.charts.load('current', { packages: ['corechart', 'line'] });\n        window.google.charts.setOnLoadCallback(drawBasic);\n\n        function drawBasic() {\n\n            var data = new window.google.visualization.DataTable();\n            data.addColumn('string', 'X');\n            data.addColumn('number', 'Temperatura');\n\n            data.addRows([\n                [convertTimestamp(props.weather[0].dt), props.weather[0].temp.max],\n                [convertTimestamp(props.weather[1].dt), props.weather[1].temp.max],\n                [convertTimestamp(props.weather[2].dt), props.weather[2].temp.max],\n                [convertTimestamp(props.weather[3].dt), props.weather[3].temp.max],\n                [convertTimestamp(props.weather[4].dt), props.weather[4].temp.max],\n                [convertTimestamp(props.weather[5].dt), props.weather[5].temp.max],\n                [convertTimestamp(props.weather[6].dt), props.weather[6].temp.max],\n            ]);\n\n            var options = {\n                hAxis: {\n                    title: 'Data'\n                },\n                vAxis: {\n                    title: 'Temperatura (Celsius)'\n                }\n            };\n\n            var chart = new window.google.visualization.LineChart(document.getElementById('chart_div'));\n\n            chart.draw(data, options);\n        }\n    }\n\n    return (\n        <div style={{ maxWidth: '100%', width: '90%' }} className=\"row\">\n\n            <div className=\"col-12 w-full\">\n                <h5>Gráfico da taxa de variação da temperatura</h5>\n            </div>\n            <div className=\"col-12 w-full mx-auto text-center\">\n                <div className=\"mx-auto\" id=\"chart_div\" style={{ height: 400 }}></div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\nimport { Card } from 'react-bootstrap';\nimport WeatherCharts from './WeatherCharts';\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`scrollable-auto-tabpanel-${index}`}\n            aria-labelledby={`scrollable-auto-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <div>{children}</div>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `scrollable-auto-tab-${index}`,\n        'aria-controls': `scrollable-auto-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '100%',\n        backgroundColor: theme.palette.background.paper,\n    },\n}));\n\nexport default function DailyWeather(props) {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    //week days array\n    const weekDaysArray = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'];\n\n    function convertTimestamp(timestamp) {\n        var d = new Date(timestamp * 1000),\n            yyyy = d.getFullYear(),\n            mm = ('0' + (d.getMonth() + 1)).slice(-2),  \n            dd = ('0' + d.getDate()).slice(-2),\n            hh = d.getHours(),\n            h = hh,\n            min = ('0' + d.getMinutes()).slice(-2),\n            ampm = 'AM',\n            time;\n\n        if (hh > 12) {\n            h = hh - 12;\n            ampm = 'PM';\n        } else if (hh === 12) {\n            h = 12;\n            ampm = 'PM';\n        } else if (hh == 0) {\n            h = 12;\n        }\n\n        time = dd + '/' + mm;\n        return time;\n    }\n\n    function getWeekDay(timestamp) {\n        var d = new Date(timestamp * 1000);\n        let ww = d.getDay();\n\n        return weekDaysArray[ww];\n    }\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" color=\"default\">\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    variant=\"scrollable\"\n                    scrollButtons=\"auto\"\n                    aria-label=\"scrollable auto tabs example\"\n                    TabIndicatorProps={{\n                        style: {\n                            backgroundColor: \"#20232a\"\n                        }\n                    }}\n                >\n                    <Tab label=\"Diário\" {...a11yProps(0)} />\n                    <Tab label=\"Gráfico\" {...a11yProps(1)} />\n                    <Tab label=\"Mapa\" {...a11yProps(2)} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n                <div className=\"row\">\n                    {props.dailyWeather.map((item, index) => {\n                        if (index == 0 || index >= 6) return;\n                        return (\n                            <div key={index} className=\"col-12 p-2 col-md-6\">\n                                <Card style={{ width: '100%' }}>\n                                    <Card.Body>\n                                        <div className=\"d-flex\">\n                                                <h6 style={{marginRight:10}} className=\"my-auto\">{getWeekDay(item.dt)}, {convertTimestamp(item.dt)}  </h6>\n\n                                            <div style={{ marginLeft: 5 }} className=\"my-auto\">\n                                                <h3 style={{ display: 'inline' }} className=\"\">{item.temp.max}<span>&#8451;</span></h3>\n\n                                                <h6 style={{ display: 'inline', marginLeft: 5 }} className=\"text-muted\">{item.temp.min}<span>&#8451;</span></h6>\n                                            </div>\n\n                                            <p style={{marginLeft:30}} className=\"my-auto text-capitalize\">\n                                                {item.weather[0].description}\n                                            </p>\n                                        </div>\n                                    </Card.Body>\n                                </Card>\n                            </div>\n                        )\n                    })}\n                </div>\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                <WeatherCharts weather={props.dailyWeather}/>\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n               \n            </TabPanel>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst googleMapKey = process.env.GOOGLE_API_KEY\n\nfunction initGoogleScripts() {\n    return new Promise(resolve => {\n        const script = document.createElement('script')\n        const body = document.getElementsByTagName('head')[0]\n        script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyBOmbgpcRJXTRLaF0YVwXHFPxSmCbGf7lA&libraries=places&v=weekly&channel=2`\n        script.async = true\n        body.appendChild(script)\n        script.addEventListener('load', () => {\n            return resolve(script)\n        })\n    })\n}\n\nexport default function Search() {\n    const [address, setAddress] = useState('');\n    const routeNavigation = useHistory()\n\n    const initMapScript = () => {\n        // if script already loaded\n        if (window.google) {\n            return Promise.resolve();\n        }\n\n        return initGoogleScripts();\n    }\n\n\n    useEffect(() => {\n        window.google = undefined\n\n        initMapScript().then(() => initAutocomplete())\n\n\n    }, [])\n\n    const initAutocomplete = () => {\n\n        // Create the search box and link it to the UI element.\n        const input = document.getElementById(\"pac-input\");\n        var options = {\n            types: ['(cities)']\n        };\n        const searchBox = new window.google.maps.places.SearchBox(input, options);\n\n\n        // Listen for the event fired when the user selects a prediction and retrieve\n        // more details for that place.\n        searchBox.addListener(\"places_changed\", () => {\n            const places = searchBox.getPlaces();\n\n            let addressName = places[0].formatted_address;\n\n            places.forEach(place => {\n                if (place.geometry) {\n                    console.log('lat', place.geometry.location.lat())\n                    console.log('lng', place.geometry.location.lng())\n                    let coordinates = {\n                        lat: place.geometry.location.lat(),\n                        lng: place.geometry.location.lng()\n                    }\n                    return routeNavigation.push(`/weather/${addressName}/${coordinates.lat}/${coordinates.lng}`)\n                    //return getWeather(place.geometry.location.lat(), place.geometry.location.lng());\n                }\n            });\n        });\n    }\n\n\n    return (\n        <>\n            <SearchIcon />\n            <input\n                id=\"pac-input\"\n                className=\"controls\"\n                type=\"text\"\n                placeholder=\"Introduzir cidade/região\"\n                value={address}\n                onChange={(event) => setAddress(event.target.value)}\n            />\n        </>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { Link, useParams } from \"react-router-dom\";\nimport { create } from 'apisauce'\nimport { Row, Col, Spinner, Container } from 'react-bootstrap';\nimport DailyWeather from '../Components/DailyWeather'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport Search from '../Components/Search';\nconst api = create({\n    baseURL: 'https://api.openweathermap.org/data/2.5',\n    headers: { Accept: 'application/vnd.github.v3+json' },\n})\n\nexport default function Weather() {\n    let { address, lat, lng } = useParams();\n    const [loadingWeather, setLoadingWeather] = useState(true);\n    //const [address, setAddress] = useState(null);\n    const [weatherInfo, setWeatherInfo] = useState(null);\n\n\n    function convertTimestamp(timestamp) {\n        var d = new Date(timestamp * 1000), // Convert the passed timestamp to milliseconds\n            yyyy = d.getFullYear(),\n            mm = ('0' + (d.getMonth() + 1)).slice(-2),  // Months are zero based. Add leading 0.\n            dd = ('0' + d.getDate()).slice(-2),         // Add leading 0.\n            hh = d.getHours(),\n            h = hh,\n            min = ('0' + d.getMinutes()).slice(-2),     // Add leading 0.\n            ampm = 'AM',\n            time;\n\n        if (hh > 12) {\n            h = hh - 12;\n            ampm = 'PM';\n        } else if (hh === 12) {\n            h = 12;\n            ampm = 'PM';\n        } else if (hh == 0) {\n            h = 12;\n        }\n\n        // ie: 2014-03-24, 3:00 PM\n        time = dd + '-' + mm + '-' + yyyy + ', ' + h + ':' + min + ' ' + ampm;\n        return time;\n    }\n\n    const getWeather = () => {\n        setLoadingWeather(true)\n        api\n            .get(`/onecall?lat=${lat}&lon=${lng}&exclude=hourly,minutely,alerts&appid=41dd22a7dd63c54afb6b91e5144b8c63&units=metric&lang=pt`)\n            .then((response) => {\n                console.log(response.data.daily)\n                if (response.status = '200') {\n                    setWeatherInfo(response.data)\n                } else {\n                    setWeatherInfo('')\n                }\n            })\n            .catch((err) => { console.log(err) })\n            .finally(() => { setLoadingWeather(false); })\n    }\n\n    useEffect(() => {\n\n        getWeather()\n\n    }, [])\n\n    return (\n        <div>\n            <div style={{ minHeight: 60, backgroundColor: '#20232a' }}>\n                <Container className=\"px-5 py-2\">\n                    <Row className=\"justify-content-center w-full\">\n                        <Col xs={12} sm={12} md={6} className=\"d-flex\">\n                        <Link style={{textDecoration:'none'}} to=\"/about\"><ArrowBackIcon style={{color:'#fff',fontSize:40}}/></Link>\n\n                            \n                        </Col>\n                        <Col xs={12} sm={12} md={6} className=\"text-left mr-0\">\n                            <h1 className=\"text-white d-none\">Weater</h1>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n\n\n            {loadingWeather ?\n                <>\n                    <Container className=\"mx-auto pt-5\">\n                        <div className=\"mx-auto text-center\">\n                            <Spinner animation=\"border\" style={{ width: '3rem', height: '3rem' }} role=\"status\">\n                                <span className=\"visually-hidden\">Loading...</span>\n                            </Spinner>\n                        </div>\n                    </Container>\n\n                </> :\n                <>\n                    {weatherInfo ?\n                        <>\n                            <div className=\"pt-5\">\n                                <Container className=\"mx-auto\">\n                                    <div className=\"mx-auto text-center\">\n                                        <h2>{address}</h2>\n                                        <p style={{ fontSize: 20 }}>Actualizado à {convertTimestamp(weatherInfo.current.dt)}</p>\n\n                                        <span style={{ fontSize: 60 }}>\n                                            {weatherInfo.current.temp}\n                                            <span>&#8451;</span>\n                                        </span>\n                                        <p style={{ textTransform: 'capitalize', fontSize: 20 }}>{weatherInfo.current.weather[0].description}</p>\n                                        <div style={{ fontSize: 18 }} className=\"row w-75 mx-auto\">\n                                            <div className=\"col-sm-12 col-md-4\">\n                                                <span style={{ fontWeight: 500 }}>Humidade: </span>\n                                                {weatherInfo.current.humidity} %\n                                            </div>\n                                            <div className=\"col-sm-12 col-md-4\">\n                                                <span style={{ fontWeight: 500 }}>Visibilidade: </span>\n                                                {Number(weatherInfo.current.visibility) / 1000} km\n                                            </div>\n                                            <div className=\"col-sm-12 col-md-4\">\n                                                <span style={{ fontWeight: 500 }}>Vento: </span>\n                                                {(Number(weatherInfo.current.wind_speed) * 3.6).toFixed(2)} km/h\n                                            </div>\n                                        </div>\n                                    </div>\n\n\n                                    <div className=\"pt-5\">\n                                       <DailyWeather dailyWeather={weatherInfo.daily}/>\n                                    </div>\n\n                                </Container>\n\n                            </div>\n                        </>\n                        :\n                        <div className=\"pt-5\">\n                            <Container className=\"mx-auto\">\n\n\n                                <div className=\"mx-auto text-center\">\n                                    <h2>Sem informação disponível</h2>\n                                </div>\n\n                            </Container>\n                        </div>\n\n                    }\n                </>\n            }\n        </div>\n    )\n}","import React from 'react';\nimport Search from '../Components/Search';\n\nexport default function Home() {\n    return (\n        <div className=\"home-div\">\n            <div className=\"d-flex flex-column align-items-center justify-content-center h-75 w-50 ml-0 mr-0 mx-auto\">\n                <h1 className=\"text-center pb-3 text-white\">Weather</h1>\n\n                <div>\n                    <span className=\"home-search w-full\">\n                        <Search />\n\n                    </span>\n                </div>\n            </div>\n        </div >\n    )\n\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Weather from './Views/Weather'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Home from './Views/Home';\n\n\nfunction App() {\n  return (\n    <>\n      <Router>\n       \n\n        <Switch>\n          <Route path=\"/weather/:address/:lat/:lng\">\n            <Weather />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n\n    </>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}